// LPC_qsys_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module LPC_qsys_mm_interconnect_1 (
		input  wire        clk_50M_clk_clk,                                         //                                       clk_50M_clk.clk
		input  wire        ddr3_read_master_reset_sink_reset_bridge_in_reset_reset, // ddr3_read_master_reset_sink_reset_bridge_in_reset.reset
		input  wire [15:0] ddr3_read_master_ddr3_avalon_master_address,             //               ddr3_read_master_ddr3_avalon_master.address
		output wire        ddr3_read_master_ddr3_avalon_master_waitrequest,         //                                                  .waitrequest
		input  wire        ddr3_read_master_ddr3_avalon_master_read,                //                                                  .read
		output wire [15:0] ddr3_read_master_ddr3_avalon_master_readdata,            //                                                  .readdata
		output wire        ddr3_read_master_ddr3_avalon_master_readdatavalid,       //                                                  .readdatavalid
		output wire [12:0] read_memory_s2_address,                                  //                                    read_memory_s2.address
		output wire        read_memory_s2_write,                                    //                                                  .write
		input  wire [15:0] read_memory_s2_readdata,                                 //                                                  .readdata
		output wire [15:0] read_memory_s2_writedata,                                //                                                  .writedata
		output wire [1:0]  read_memory_s2_byteenable,                               //                                                  .byteenable
		output wire        read_memory_s2_chipselect,                               //                                                  .chipselect
		output wire        read_memory_s2_clken                                     //                                                  .clken
	);

	wire         ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_waitrequest;   // read_memory_s2_translator:uav_waitrequest -> ddr3_read_master_ddr3_avalon_master_translator:uav_waitrequest
	wire  [15:0] ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_readdata;      // read_memory_s2_translator:uav_readdata -> ddr3_read_master_ddr3_avalon_master_translator:uav_readdata
	wire         ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_debugaccess;   // ddr3_read_master_ddr3_avalon_master_translator:uav_debugaccess -> read_memory_s2_translator:uav_debugaccess
	wire  [16:0] ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_address;       // ddr3_read_master_ddr3_avalon_master_translator:uav_address -> read_memory_s2_translator:uav_address
	wire         ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_read;          // ddr3_read_master_ddr3_avalon_master_translator:uav_read -> read_memory_s2_translator:uav_read
	wire   [1:0] ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_byteenable;    // ddr3_read_master_ddr3_avalon_master_translator:uav_byteenable -> read_memory_s2_translator:uav_byteenable
	wire         ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_readdatavalid; // read_memory_s2_translator:uav_readdatavalid -> ddr3_read_master_ddr3_avalon_master_translator:uav_readdatavalid
	wire         ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_lock;          // ddr3_read_master_ddr3_avalon_master_translator:uav_lock -> read_memory_s2_translator:uav_lock
	wire         ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_write;         // ddr3_read_master_ddr3_avalon_master_translator:uav_write -> read_memory_s2_translator:uav_write
	wire  [15:0] ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_writedata;     // ddr3_read_master_ddr3_avalon_master_translator:uav_writedata -> read_memory_s2_translator:uav_writedata
	wire   [1:0] ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_burstcount;    // ddr3_read_master_ddr3_avalon_master_translator:uav_burstcount -> read_memory_s2_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (17),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ddr3_read_master_ddr3_avalon_master_translator (
		.clk                    (clk_50M_clk_clk),                                                                        //                       clk.clk
		.reset                  (ddr3_read_master_reset_sink_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ddr3_read_master_ddr3_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ddr3_read_master_ddr3_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (ddr3_read_master_ddr3_avalon_master_read),                                               //                          .read
		.av_readdata            (ddr3_read_master_ddr3_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (ddr3_read_master_ddr3_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                   //               (terminated)
		.av_byteenable          (2'b11),                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                                   //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                                   //               (terminated)
		.uav_clken              (),                                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                                  //               (terminated)
		.av_response            (),                                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                                        //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (17),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_memory_s2_translator (
		.clk                    (clk_50M_clk_clk),                                                                        //                      clk.clk
		.reset                  (ddr3_read_master_reset_sink_reset_bridge_in_reset_reset),                                //                    reset.reset
		.uav_address            (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (ddr3_read_master_ddr3_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (read_memory_s2_address),                                                                 //      avalon_anti_slave_0.address
		.av_write               (read_memory_s2_write),                                                                   //                         .write
		.av_readdata            (read_memory_s2_readdata),                                                                //                         .readdata
		.av_writedata           (read_memory_s2_writedata),                                                               //                         .writedata
		.av_byteenable          (read_memory_s2_byteenable),                                                              //                         .byteenable
		.av_chipselect          (read_memory_s2_chipselect),                                                              //                         .chipselect
		.av_clken               (read_memory_s2_clken),                                                                   //                         .clken
		.av_read                (),                                                                                       //              (terminated)
		.av_begintransfer       (),                                                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                                                       //              (terminated)
		.av_burstcount          (),                                                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                                       //              (terminated)
		.av_lock                (),                                                                                       //              (terminated)
		.uav_clken              (1'b0),                                                                                   //              (terminated)
		.av_debugaccess         (),                                                                                       //              (terminated)
		.av_outputenable        (),                                                                                       //              (terminated)
		.uav_response           (),                                                                                       //              (terminated)
		.av_response            (2'b00),                                                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                    //              (terminated)
	);

endmodule
