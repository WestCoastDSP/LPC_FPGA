	top_LPC_FPGA u0 (
		.algorithm_run_export                  (<connected-to-algorithm_run_export>),                  //        algorithm_run.export
		.avmm_master_control_rm_fixed_location (<connected-to-avmm_master_control_rm_fixed_location>), //  avmm_master_control.rm_fixed_location
		.avmm_master_control_rm_read_base      (<connected-to-avmm_master_control_rm_read_base>),      //                     .rm_read_base
		.avmm_master_control_rm_read_length    (<connected-to-avmm_master_control_rm_read_length>),    //                     .rm_read_length
		.avmm_master_control_rm_go             (<connected-to-avmm_master_control_rm_go>),             //                     .rm_go
		.avmm_master_control_rm_done           (<connected-to-avmm_master_control_rm_done>),           //                     .rm_done
		.avmm_master_control_wm_fixed_location (<connected-to-avmm_master_control_wm_fixed_location>), //                     .wm_fixed_location
		.avmm_master_control_wm_write_base     (<connected-to-avmm_master_control_wm_write_base>),     //                     .wm_write_base
		.avmm_master_control_wm_write_length   (<connected-to-avmm_master_control_wm_write_length>),   //                     .wm_write_length
		.avmm_master_control_wm_go             (<connected-to-avmm_master_control_wm_go>),             //                     .wm_go
		.avmm_master_control_wm_done           (<connected-to-avmm_master_control_wm_done>),           //                     .wm_done
		.clk_clk                               (<connected-to-clk_clk>),                               //                  clk.clk
		.memory_mem_a                          (<connected-to-memory_mem_a>),                          //               memory.mem_a
		.memory_mem_ba                         (<connected-to-memory_mem_ba>),                         //                     .mem_ba
		.memory_mem_ck                         (<connected-to-memory_mem_ck>),                         //                     .mem_ck
		.memory_mem_ck_n                       (<connected-to-memory_mem_ck_n>),                       //                     .mem_ck_n
		.memory_mem_cke                        (<connected-to-memory_mem_cke>),                        //                     .mem_cke
		.memory_mem_cs_n                       (<connected-to-memory_mem_cs_n>),                       //                     .mem_cs_n
		.memory_mem_dm                         (<connected-to-memory_mem_dm>),                         //                     .mem_dm
		.memory_mem_ras_n                      (<connected-to-memory_mem_ras_n>),                      //                     .mem_ras_n
		.memory_mem_cas_n                      (<connected-to-memory_mem_cas_n>),                      //                     .mem_cas_n
		.memory_mem_we_n                       (<connected-to-memory_mem_we_n>),                       //                     .mem_we_n
		.memory_mem_reset_n                    (<connected-to-memory_mem_reset_n>),                    //                     .mem_reset_n
		.memory_mem_dq                         (<connected-to-memory_mem_dq>),                         //                     .mem_dq
		.memory_mem_dqs                        (<connected-to-memory_mem_dqs>),                        //                     .mem_dqs
		.memory_mem_dqs_n                      (<connected-to-memory_mem_dqs_n>),                      //                     .mem_dqs_n
		.memory_mem_odt                        (<connected-to-memory_mem_odt>),                        //                     .mem_odt
		.oct_rzqin                             (<connected-to-oct_rzqin>),                             //                  oct.rzqin
		.read_master_control_fixed_location    (<connected-to-read_master_control_fixed_location>),    //  read_master_control.fixed_location
		.read_master_control_read_base         (<connected-to-read_master_control_read_base>),         //                     .read_base
		.read_master_control_read_length       (<connected-to-read_master_control_read_length>),       //                     .read_length
		.read_master_control_go                (<connected-to-read_master_control_go>),                //                     .go
		.read_master_control_done              (<connected-to-read_master_control_done>),              //                     .done
		.read_master_control_early_done        (<connected-to-read_master_control_early_done>),        //                     .early_done
		.read_master_stream_read_buffer        (<connected-to-read_master_stream_read_buffer>),        //   read_master_stream.read_buffer
		.read_master_stream_buffer_output_data (<connected-to-read_master_stream_buffer_output_data>), //                     .buffer_output_data
		.read_master_stream_data_available     (<connected-to-read_master_stream_data_available>),     //                     .data_available
		.status_local_init_done                (<connected-to-status_local_init_done>),                //               status.local_init_done
		.status_local_cal_success              (<connected-to-status_local_cal_success>),              //                     .local_cal_success
		.status_local_cal_fail                 (<connected-to-status_local_cal_fail>),                 //                     .local_cal_fail
		.write_master_control_fixed_location   (<connected-to-write_master_control_fixed_location>),   // write_master_control.fixed_location
		.write_master_control_write_base       (<connected-to-write_master_control_write_base>),       //                     .write_base
		.write_master_control_write_length     (<connected-to-write_master_control_write_length>),     //                     .write_length
		.write_master_control_go               (<connected-to-write_master_control_go>),               //                     .go
		.write_master_control_done             (<connected-to-write_master_control_done>),             //                     .done
		.write_master_stream_write_buffer      (<connected-to-write_master_stream_write_buffer>),      //  write_master_stream.write_buffer
		.write_master_stream_buffer_input_data (<connected-to-write_master_stream_buffer_input_data>), //                     .buffer_input_data
		.write_master_stream_buffer_full       (<connected-to-write_master_stream_buffer_full>)        //                     .buffer_full
	);

